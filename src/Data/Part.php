<?php

declare(strict_types=1);

namespace Derrickob\GeminiApi\Data;

use Derrickob\GeminiApi\Traits\Data\HasPartData;

final class Part
{
    use HasPartData;

    /**
     * @param string|null              $text                Inline text.
     * @param Blob|null                $inlineData          Inline media bytes.
     * @param FunctionCall|null        $functionCall        A predicted FunctionCall returned from the model that contains a string representing the FunctionDeclaration.name with the arguments and their values.
     * @param FunctionResponse|null    $functionResponse    The result output of a FunctionCall that contains a string representing the FunctionDeclaration.name and a structured JSON object containing any output from the function is used as context to the model.
     * @param FileData|null            $fileData            URI based data.
     * @param ExecutableCode|null      $executableCode      Code generated by the model that is meant to be executed.
     * @param CodeExecutionResult|null $codeExecutionResult Result of executing the ExecutableCode.
     */
    public function __construct(
        public readonly ?string              $text = null,
        public readonly ?Blob                $inlineData = null,
        public readonly ?FunctionCall        $functionCall = null,
        public readonly ?FunctionResponse    $functionResponse = null,
        public readonly ?FileData            $fileData = null,
        public readonly ?ExecutableCode      $executableCode = null,
        public readonly ?CodeExecutionResult $codeExecutionResult = null,
    ) {
        //
    }

    public static function fromArray(array $data): self
    {
        return new self(
            text: $data['text'] ?? null,
            inlineData: isset($data['inlineData']) ? Blob::fromArray($data['inlineData']) : null,
            functionCall: isset($data['functionCall']) ? FunctionCall::fromArray($data['functionCall']) : null,
            functionResponse: isset($data['functionResponse']) ? FunctionResponse::fromArray($data['functionResponse']) : null,
            fileData: isset($data['fileData']) ? FileData::fromArray($data['fileData']) : null,
            executableCode: isset($data['executableCode']) ? ExecutableCode::fromArray($data['executableCode']) : null,
            codeExecutionResult: isset($data['codeExecutionResult']) ? CodeExecutionResult::fromArray($data['codeExecutionResult']) : null,
        );
    }

    public function toArray(): array
    {
        $result = [];

        if ($this->text !== null) {
            $result['text'] = $this->text;
        }

        if ($this->inlineData instanceof Blob) {
            $result['inlineData'] = $this->inlineData->toArray();
        }

        if ($this->functionCall instanceof FunctionCall) {
            $result['functionCall'] = $this->functionCall->toArray();
        }

        if ($this->functionResponse instanceof FunctionResponse) {
            $result['functionResponse'] = $this->functionResponse->toArray();
        }

        if ($this->fileData instanceof FileData) {
            $result['fileData'] = $this->fileData->toArray();
        }

        if ($this->executableCode instanceof ExecutableCode) {
            $result['executableCode'] = $this->executableCode->toArray();
        }

        if ($this->codeExecutionResult instanceof CodeExecutionResult) {
            $result['codeExecutionResult'] = $this->codeExecutionResult->toArray();
        }

        return $result;
    }
}
